
stop_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ee  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000406  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014b  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035e  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000003c  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fa  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCD>:
#define F_CPU 4000000UL
#include <util/delay.h>

unsigned char BCD(unsigned char y)
{
	y=y&0x0F;
  92:	8f 70       	andi	r24, 0x0F	; 15
	if (y>9)
  94:	8a 30       	cpi	r24, 0x0A	; 10
  96:	08 f0       	brcs	.+2      	; 0x9a <BCD+0x8>
	{
		y=y+6;
  98:	8a 5f       	subi	r24, 0xFA	; 250
	}
	return y;
}
  9a:	08 95       	ret

0000009c <main>:


int main(void)
{
  9c:	cf 93       	push	r28
	unsigned char x=0;
	DDRA&=0xDF;
  9e:	d5 98       	cbi	0x1a, 5	; 26
	DDRB=0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	DDRC|=0x03;
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x03;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
	
	while((PINA & 0x02)==0);
  b0:	c9 9b       	sbis	0x19, 1	; 25
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x14>
  b4:	cc e3       	ldi	r28, 0x3C	; 60
  b6:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char i=0;i<60;++i)
	{
		x=BCD(x);
  b8:	0e 94 49 00 	call	0x92	; 0x92 <BCD>
		PORTB=x;
  bc:	88 bb       	out	0x18, r24	; 24
		PORTC &=0xFC;
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	9c 7f       	andi	r25, 0xFC	; 252
  c2:	95 bb       	out	0x15, r25	; 21
		PORTC |=0X03;
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	93 60       	ori	r25, 0x03	; 3
  c8:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	34 e3       	ldi	r19, 0x34	; 52
  ce:	4c e0       	ldi	r20, 0x0C	; 12
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	40 40       	sbci	r20, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x34>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3e>
  da:	00 00       	nop
		_delay_ms(1000);
		x++;
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	c1 50       	subi	r28, 0x01	; 1
	DDRB=0xFF;
	DDRC|=0x03;
	PORTC|=0x03;
	
	while((PINA & 0x02)==0);
	for(unsigned char i=0;i<60;++i)
  e0:	59 f7       	brne	.-42     	; 0xb8 <main+0x1c>
		PORTC &=0xFC;
		PORTC |=0X03;
		_delay_ms(1000);
		x++;
	}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
