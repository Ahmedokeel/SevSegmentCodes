
two_seven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e6  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000131  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f7  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f7  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017e  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<util/delay.h>


int main(void)
{
	unsigned char num[2]={0,0},c=0;
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	40 e0       	ldi	r20, 0x00	; 0
	
	DDRA |=0x0C;
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	8c 60       	ori	r24, 0x0C	; 12
  9a:	8a bb       	out	0x1a, r24	; 26
	DDRD |=0xF0;
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	80 6f       	ori	r24, 0xF0	; 240
  a0:	81 bb       	out	0x11, r24	; 17
	PORTA &=(~(1<<1));
  a2:	d9 98       	cbi	0x1b, 1	; 27
	
	
	while(PINA & 0x01==1);
  a4:	c8 99       	sbic	0x19, 0	; 25
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x12>
  a8:	20 e0       	ldi	r18, 0x00	; 0
             {
	             for (unsigned char i=2;i<4;i++)
	             {
					 if(c>9)
					 {
						 num[0]=c%10;
  aa:	5a e0       	ldi	r21, 0x0A	; 10
  ac:	30 c0       	rjmp	.+96     	; 0x10e <main+0x7c>
  ae:	39 2f       	mov	r19, r25
						 num[1]=c/10;
  b0:	48 2f       	mov	r20, r24
					 }
					 PORTD &=0x0F;
  b2:	72 b3       	in	r23, 0x12	; 18
  b4:	7f 70       	andi	r23, 0x0F	; 15
  b6:	72 bb       	out	0x12, r23	; 18
					 PORTD |=(num[(i-2)]<<4);
  b8:	72 b3       	in	r23, 0x12	; 18
  ba:	e4 2f       	mov	r30, r20
  bc:	e2 95       	swap	r30
  be:	e0 7f       	andi	r30, 0xF0	; 240
  c0:	7e 2b       	or	r23, r30
  c2:	72 bb       	out	0x12, r23	; 18
					 PORTD |=(1<<i);
  c4:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef e1       	ldi	r30, 0x1F	; 31
  c8:	fe e4       	ldi	r31, 0x4E	; 78
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3e>
  d0:	00 00       	nop
					 _delay_ms(10);
					 PORTA &=(~(1<<i));
  d2:	db 98       	cbi	0x1b, 3	; 27
  d4:	61 50       	subi	r22, 0x01	; 1
	
	while(c<60)
	{
		
 	
         for(unsigned char j=0;j<50;j++)
  d6:	c1 f0       	breq	.+48     	; 0x108 <main+0x76>
             {
	             for (unsigned char i=2;i<4;i++)
	             {
					 if(c>9)
  d8:	2a 30       	cpi	r18, 0x0A	; 10
  da:	10 f0       	brcs	.+4      	; 0xe0 <main+0x4e>
					 {
						 num[0]=c%10;
  dc:	39 2f       	mov	r19, r25
						 num[1]=c/10;
  de:	48 2f       	mov	r20, r24
					 }
					 PORTD &=0x0F;
  e0:	72 b3       	in	r23, 0x12	; 18
  e2:	7f 70       	andi	r23, 0x0F	; 15
  e4:	72 bb       	out	0x12, r23	; 18
					 PORTD |=(num[(i-2)]<<4);
  e6:	72 b3       	in	r23, 0x12	; 18
  e8:	e3 2f       	mov	r30, r19
  ea:	e2 95       	swap	r30
  ec:	e0 7f       	andi	r30, 0xF0	; 240
  ee:	7e 2b       	or	r23, r30
  f0:	72 bb       	out	0x12, r23	; 18
					 PORTD |=(1<<i);
  f2:	92 9a       	sbi	0x12, 2	; 18
  f4:	ef e1       	ldi	r30, 0x1F	; 31
  f6:	fe e4       	ldi	r31, 0x4E	; 78
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x6c>
  fe:	00 00       	nop
					 _delay_ms(10);
					 PORTA &=(~(1<<i));
 100:	da 98       	cbi	0x1b, 2	; 27
 	
         for(unsigned char j=0;j<50;j++)
             {
	             for (unsigned char i=2;i<4;i++)
	             {
					 if(c>9)
 102:	2a 30       	cpi	r18, 0x0A	; 10
 104:	a0 f6       	brcc	.-88     	; 0xae <main+0x1c>
 106:	d5 cf       	rjmp	.-86     	; 0xb2 <main+0x20>
					 _delay_ms(10);
					 PORTA &=(~(1<<i));
	             }
	           	 
            }
			c++;
 108:	2f 5f       	subi	r18, 0xFF	; 255
	PORTA &=(~(1<<1));
	
	
	while(PINA & 0x01==1);
	
	while(c<60)
 10a:	2c 33       	cpi	r18, 0x3C	; 60
 10c:	31 f0       	breq	.+12     	; 0x11a <main+0x88>
	             for (unsigned char i=2;i<4;i++)
	             {
					 if(c>9)
					 {
						 num[0]=c%10;
						 num[1]=c/10;
 10e:	82 2f       	mov	r24, r18
 110:	65 2f       	mov	r22, r21
 112:	0e 94 90 00 	call	0x120	; 0x120 <__udivmodqi4>
 116:	62 e3       	ldi	r22, 0x32	; 50
 118:	df cf       	rjmp	.-66     	; 0xd8 <main+0x46>
	           	 
            }
			c++;
  
  }  
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <__udivmodqi4>:
 120:	99 1b       	sub	r25, r25
 122:	79 e0       	ldi	r23, 0x09	; 9
 124:	04 c0       	rjmp	.+8      	; 0x12e <__udivmodqi4_ep>

00000126 <__udivmodqi4_loop>:
 126:	99 1f       	adc	r25, r25
 128:	96 17       	cp	r25, r22
 12a:	08 f0       	brcs	.+2      	; 0x12e <__udivmodqi4_ep>
 12c:	96 1b       	sub	r25, r22

0000012e <__udivmodqi4_ep>:
 12e:	88 1f       	adc	r24, r24
 130:	7a 95       	dec	r23
 132:	c9 f7       	brne	.-14     	; 0x126 <__udivmodqi4_loop>
 134:	80 95       	com	r24
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
